//The SpriteUtils is responsible for providing the correct sprite for a world object
//such as a unit or a city. It takes into consideration such things as city rank,
//and the terrain around a tile of terrain.
package civ.sprites;

import civ.*;
import java.io.FileReader;
import civ.enums.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.BufferedReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import java.awt.Color;

public class SpriteUtils {

    private HashMap<TerrainType, Color> miniMapColorPalette;
    private HashMap<String, BufferedImage> terrainMap;
    private HashMap<String, BufferedImage> cityMap;
    private HashMap<TerrainBonusType, BufferedImage> terrainBonusMap;
    private HashMap<UnitType, BufferedImage> unitMap;
    private BufferedImage highlight;
    private World world;
    private static final int TILEWIDTH = 30;
    private static final int TILEHEIGHT = 30;
    BufferedReader reader;

    /**
     * Creates a new SpriteUtils with the world for reference
     * @param world the world currently used in game.
     * @throws InstantiationException
     */
    public SpriteUtils(World world) throws InstantiationException {
        try {
            this.world = world;
            loadTerrain();
            loadTerrainBonus();
            loadCities();
            loadUnits();
            loadHighlight();
            loadMiniMapPalette();
        } catch (IOException e) {
            throw new InstantiationException(e.getMessage());
        }
    }

    /**
     * Return the size of the tiles in pixels.
     * @return tile size in pixels
     */
    public int getTileSize() {
        return TILEWIDTH;
    }

    //Load the HashMap of colors using the spec file.
    private void loadMiniMapPalette() {
        miniMapColorPalette = new HashMap<TerrainType, Color>();
        Color colorSet;
        try {
            BufferedReader freader = new BufferedReader(new FileReader(new File("resources/sprites/miniMapPalette.spec")));
            String line;
            String[] values;
            freader.readLine();
            while ((line = freader.readLine()) != null) {
                values = line.split(" ");
                colorSet = new Color(Integer.parseInt(values[1]), Integer.parseInt(values[2]), Integer.parseInt(values[1]));
                miniMapColorPalette.put(TerrainType.valueOf(values[0]), colorSet);
            }
        } catch (IOException ex) {
            Logger.getLogger("Error instantiating mini map color palette");
        }
    }

    //Load the terrain sprite tiles from the sprite sheets
    private void loadTerrain() throws IOException {
        terrainMap = new HashMap<String, BufferedImage>();
        SpriteParser parser = new SpriteParser("resources/sprites/tiles.png", "resources/sprites/tiles_terrain.sprites");
        Tuple<String, BufferedImage> pair;
        while ((pair = parser.next()) != null) {
            terrainMap.put(pair.x, pair.y);
        }
    }

    //Load the terrain bonus sprites
    private void loadTerrainBonus() throws IOException {
        terrainBonusMap = new HashMap<TerrainBonusType, BufferedImage>();
        SpriteParser parser = new SpriteParser("resources/sprites/tiles.png", "resources/sprites/tiles_terrainBonus.sprites");
        Tuple<String, BufferedImage> spritePair;
        while ((spritePair = parser.next()) != null) {
            terrainBonusMap.put(TerrainBonusType.valueOf(spritePair.x), spritePair.y);
        }
    }

    //load the city sprites from the sprite sheet
    private void loadCities() throws IOException {
        cityMap = new HashMap<String, BufferedImage>();
        SpriteParser parser = new SpriteParser("resources/sprites/cities.png", "resources/sprites/cities.sprites");
        Tuple<String, BufferedImage> spritePair;
        while ((spritePair = parser.next()) != null) {
            cityMap.put(spritePair.x, spritePair.y);
        }
    }

    //load the unit sprites from the sprite sheet using the sprites file for cropping
    private void loadUnits() throws IOException {
        unitMap = new HashMap<UnitType, BufferedImage>();
        SpriteParser parser = new SpriteParser("resources/sprites/units.png", "resources/sprites/units.sprites");
        Tuple<String, BufferedImage> spritePair;
        while ((spritePair = parser.next()) != null) {
            unitMap.put(UnitType.valueOf(spritePair.x), spritePair.y);
        }
    }

    /**
     * Returns an appropriate BufferedImage object that contains the sprite
     * representing the map tile passed in. It considers what is around the
     * tile in order to pick the appropriate sprite from the image hash.
     *
     * @param coords the map location of the tile of interest.
     * @return the appropriate sprite
     */
    public BufferedImage getTerrainSprite(MapLocation coords) {
        try {
            //Get the tile that we want to look around for ease of use later.
            Tile tile = world.getTile(coords);
            TerrainType tileType = tile.getTerrainType();
            //IF the tile is grass, then we dont care whats around, it we just
            //return the grass sprite, otherwise we need to look.
            if (tile.getTerrainType() == TerrainType.GRASSLAND) {
                return this.terrainMap.get("GRASSLAND");
            }
            int y = coords.y;
            int x = coords.x;
            int my = world.getMap().getMapHeight();
            int mx = world.getMap().getMapWidth();
            //get the base key for the sprite, ex "DESERT"
            String key = tile.getTerrainType().toString();
            //Check whats around the tile :D
            boolean north = (y > 0 ? world.getTile(x, y - 1).getTerrainType() == tileType : true);
            boolean east = (world.getTile(x + 1 > mx - 1 ? (x + 1) - mx : x + 1, y).getTerrainType() == tileType);
            boolean south = (y < my - 1 ? world.getTile(x, y + 1).getTerrainType() == tileType : true);
            boolean west = (world.getTile(x - 1 < 0 ? (x - 1) + mx : x - 1, y).getTerrainType() == tileType);
            //if the terrain is a hill, mountain or forest, we only care what
            //is east and west of it (we dont have sprites for N and S)
            if (tileType == TerrainType.HILLS || tileType == TerrainType.MOUNTAINS || tileType == TerrainType.FOREST) {
                north = south = false;
            }
            //Append the appropriate key to the type of it has surrounding types
            if (north || east || south || west) {
                key += "_" + (north ? "N" : "") + (east ? "E" : "") + (south ? "S" : "") + (west ? "W" : "");
            }
            //Return the sprite.
            return this.terrainMap.get(key);
        } catch (Exception e) {
            return null;
        }
    }

    //Load the highlight sprite from the highlight
    private void loadHighlight() {
        try {
            highlight = ImageIO.read(new File("resources/sprites/highlight.png"));
        } catch (Exception e) {
            Logger.getLogger("Invalid highlight image");
        }
    }

    /**
     * Returns the sprite used to highlight tiles in MapView
     * @return the highlight sprite
     */
    public BufferedImage getHighlight() {
        return highlight;
    }

    /**
     * Gets the sprite as a BufferedImage of the top-most unit on the map location
     * specified. If there are no units on the tile, the method returns null.
     * @param mapLocation location of interest
     * @return A sprite as a <code>BufferedImage</sprite> or <code>null</code>
     */
    public BufferedImage getUnitSprite(MapLocation mapLocation) {
        ArrayList<Unit> units = world.getUnitList(mapLocation);
        if (units.isEmpty()) {
            return null;
        }
        return unitMap.get(units.get(0).getUnitType());
    }

    /**
     * Gets the sprite as a BufferedImage of the city on the map location
     * specified. If there are no cities on the tile, the method returns null.
     * @param mapLocation location of interest
     * @return A sprite as a <code>BufferedImage</sprite> or <code>null</code>
     */
    public BufferedImage getCitySprite(MapLocation mapLocation) {
        City city = world.getCity(mapLocation);
        if (city == null) {
            return null;
        }
        return cityMap.get(city.getStyle().toString() + "_" + city.getLevel());
    }

    private class SpriteParser {

        BufferedReader spriteFileReader;
        BufferedImage spriteSheetFile;

        /**
         * Constructor
         * @param spriteSheet filename of the sprite sheet
         * @param spriteFile filename of the parse information
         * @throws IOException in the event that the files can't be opened,
         */
        SpriteParser(String spriteSheet, String spriteFile) throws IOException {
            spriteSheetFile = ImageIO.read(new File(spriteSheet));
            spriteFileReader = new BufferedReader(new FileReader(new File(spriteFile)));
            spriteFileReader.readLine();
        }

        /**
         * Grabs the next sprite and it's name from the files used to create the parser.
         * @return A <code>Tuple</code> containing the string and sprite
         * @throws IOException in the event that a file encountered an error reading
         */
        public Tuple<String, BufferedImage> next() throws IOException {
            try {
                //Throws a nullPointerException on the readline if we hit the end
                //of the file, ie there are not more sprites
                String[] values = spriteFileReader.readLine().split(" ");
                BufferedImage sprite = spriteSheetFile.getSubimage(
                        Integer.parseInt(values[1].trim()) * TILEWIDTH,
                        Integer.parseInt(values[2].trim()) * TILEHEIGHT,
                        TILEWIDTH, TILEWIDTH);
                return new Tuple<String, BufferedImage>(values[0], sprite);
            } catch (NullPointerException e) {
                return null;
            }
        }
    }

    //Private class for tuples just for simplicity.
    private class Tuple<X, Y> {

        public final X x;
        public final Y y;

        public Tuple(X x, Y y) {
            this.x = x;
            this.y = y;
        }
    }
}
