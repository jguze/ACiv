package civ.engine;

import civ.*;
import civ.UI.MapView;
import civ.enums.UnitType;
import java.awt.image.BufferedImage;
import civ.sprites.SpriteUtils;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

public class GameEngine {
    
    private World world;
    private SpriteUtils spriteUtils;
    private UnitManager unitManager;
    private NavigationUtils navUtils;
    private CombatManager combatManager;
    private MapView mapView;
    
    private int turnCount;
    
    private Player currentPlayer;
    private Unit currentlySelectedUnit;
    
    private char selectedAction; // Last selected action

    //Getter for world (used by the mapView and miniMapView)
    public World getWorld()
    {
        return world;
    }

    //THIS IS NOT COMPLETE!
    //FINISH ME SOME OTHER TIME ;)
    public GameEngine()
    {
        try
        {
            world = World.createTileTestWorld();
            unitManager = new UnitManager(world);
            currentPlayer = new Player();
            createUnit(UnitType.WARRIORS, new MapLocation(0,0));
            spriteUtils = new SpriteUtils(world);
            navUtils = new NavigationUtils(world);
            combatManager = new CombatManager();
            selectedAction = ' ';
            currentPlayer.setId(1);
            createUnit(UnitType.WARRIORS, new MapLocation(10,10));
            
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    public SpriteUtils getSpriteUtility()
    {
        return spriteUtils;
    }
    
    public void createUnit(UnitType type, MapLocation location) {
        Unit unit = new Unit(unitManager.getUnit(type));
        unit.setOwnerId(currentPlayer.getId());
        unit.setMapLocation(location);
        world.getUnit(location).add(unit);
    }

    public void findMapEntity(MapLocation interactionLocation){
        // Call world.getCity()
        // Compare city owner to current player
        // If so, then open city dialog
            // Dialog interacted with
                // Dialog has a reference to a city that will be modified and thus updated (passed by reference)
                // TODO: Activiate units supported by the city
        // If city is null
            // Call world.getUnits() (check for units)
            // Look at returned unit list, compare owners, and populate another list with units owned by current player
            // Pop UnitViewer Dialog (make sure we know whose units are whose)
                // If players units, then they select one and currentlySelectedUnit = this selection
                // Get sprite of currently selected unit from SpriteUtils
                // Call mapView.highlght();    
    }
    
    // Knows there is a selected unit and a command, now wait to determine what to do.
    public void setCommand(char key){
        selectedAction = key;
    }
    
    public char getCommand() {
        return selectedAction;
    }
    
    public void moveUnit(MapLocation desiredLocation) {
        //ArrayList<MapLocation> moveList = navUtils.getRoute(currentlySelectedUnit, desiredLocation);
        if (currentlySelectedUnit == null) {
            return;
        }
        MapLocation previousLocation = currentlySelectedUnit.getMapLocation();
        
        if(previousLocation.compare(desiredLocation)){
            currentlySelectedUnit = null;
            mapView.drawTile(desiredLocation);
            return;
        }
        
        ArrayList<MapLocation> moveList = new ArrayList<MapLocation>();
        
        moveList.add(desiredLocation);
        for (MapLocation moveTo : moveList) {
            if (isEnemyObstacle(moveTo)) {
                combatManager.collision(currentlySelectedUnit, moveTo);
                break;
            }
            world.getUnit(currentlySelectedUnit.getMapLocation()).remove(currentlySelectedUnit);
            currentlySelectedUnit.setMapLocation(moveTo);
            world.getUnit(moveTo).add(currentlySelectedUnit);
            mapView.drawMovedUnit(previousLocation, moveTo);
        }
        currentlySelectedUnit = null;
    }
    
    private boolean isEnemyObstacle(MapLocation mapLocation) {
        if (isEnemyCity(mapLocation) || isEnemyUnit(mapLocation)) {
            return true;
        }   
        return false;
    }
    
    private boolean isEnemyUnit(MapLocation mapLocation) {

        if (world.getUnit(mapLocation).isEmpty()) {
            return false;
        } else if (world.getUnit(mapLocation).get(0).getOwnerId() == currentPlayer.getId()) {
            return false;
        } else {
            return true;
        }
   }     
 
   private boolean isEnemyCity(MapLocation mapLocation) {
        City isCity = world.getCity(mapLocation);
        if (isCity == null) {
            return false;
        } else if (isCity.getOwner().equals(currentPlayer)) {
            return false;
        } else {
            return true;
        }
   }
        
    public void selectUnit(MapLocation click) {
        ArrayList<Unit> unitList = world.getUnit(click);
        if (currentlySelectedUnit != null) {
            mapView.drawTile(currentlySelectedUnit.getMapLocation());
        }
        
        if(!unitList.isEmpty()) {
            currentlySelectedUnit = unitList.get(0);
            mapView.highlight(getSpriteUtility().getHighlight(), click);
        } else {
            currentlySelectedUnit = null;
            mapView.highlight(getSpriteUtility().getHighlight(), click);
        }
    }
    
   public Unit getCurrentlySelectedUnit() {
        return currentlySelectedUnit;
   }
    
   public MapLocation getCurrentlySelectedUnitTile() {
        return currentlySelectedUnit.getMapLocation();
   }    

   public void setMapView(MapView mV) {
        mapView = mV;
   }
    
}
