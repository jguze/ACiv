/*
 * Returns terrainInfo about a MapLocation
 */

package civ.engine;
import java.io.*;
import civ.MapLocation;
import civ.TerrainInfo;
import civ.World;
import civ.Tile;
import civ.enums.TerrainType;
import java.util.EnumMap;
import java.util.logging.Logger;

public class TerrainManager implements Serializable {
    private EnumMap<TerrainType, TerrainInfo> terrainInfoMap;
    private World world;
    
    transient BufferedReader reader;
    
    public TerrainManager(World world) {
        terrainInfoMap = new EnumMap<TerrainType, TerrainInfo>(TerrainType.class);
        this.world = world;
        loadTerrainInfo();
    }

    public TerrainInfo getTerrainInfo(MapLocation mapLocation) {
        Tile tile = world.getTile(mapLocation);
        TerrainInfo base = terrainInfoMap.get(tile.getTerrainType());
        int cost = base.getMovementCost();
        if(tile.riverPresent()) 
        {
            base.setMovementCost(cost <= 3 ? 1 : cost / 3);
        }
        return base;

    }

    private void loadTerrainInfo() {
        TerrainInfo terrainInfo;        
        try {
            reader = new BufferedReader(new FileReader(new File("resources/spec/terraintype.jspec")));
            String line;
            String [] values;
            reader.readLine();
            while((line = reader.readLine()) != null) {
                values = line.split(" ");
                terrainInfo = createTerrainInfo(values);
                terrainInfoMap.put(TerrainType.valueOf(values[0]), terrainInfo);
            }
        } catch (IOException ex) {
            Logger.getLogger("Error instantiating unit types");
        }
    }
    
    public TerrainInfo createTerrainInfo(String[] attributes) {
        TerrainInfo tR = new TerrainInfo (
            Integer.parseInt(attributes[1]),
            Integer.parseInt(attributes[2]),
            Integer.parseInt(attributes[3]),
            Integer.parseInt(attributes[4]),
            Float.parseFloat(attributes[5])
        );      
        
        return tR;
    }
    
}
