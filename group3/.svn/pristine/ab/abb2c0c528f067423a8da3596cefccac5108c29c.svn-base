package civ.UI;

import civ.City;
import java.awt.*;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import javax.swing.border.BevelBorder;

/*
 * Mark's, no touchy <-- Screw you I touched. Don't tell the police.
 */

public class CityView extends JFrame
    implements WindowListener, ActionListener {
    
    private Container cp;
    private City city;
    
    public CityView(City city) {
        super(city.getName());
        this.city = city;
        
        cp = getContentPane();
        cp.setLayout(new GridBagLayout());
        cp.setBackground(Color.BLUE);
        cp.setPreferredSize(new Dimension(500, 400));        
        
        JTabbedPane tabbedPane = new JTabbedPane();
        tabbedPane.setPreferredSize(new Dimension(498, 398));
        
        JPanel overviewTab = new JPanel(new GridBagLayout());
        overviewTab.setVisible(true);
        overviewTab.setPreferredSize(new Dimension(495, 395));
        
       /* Displays a subsection of MapView of a subsection of resources (to be interactive!!!!!)
         * Possibly put it in a different tab of something
         * 
         */
        JPanel resources = new JPanel();
        resources.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(
                Color.BLACK, WIDTH), "Resources"));
        resources.setBackground(Color.LIGHT_GRAY);
        resources.setPreferredSize(new Dimension(175, 175));
        resources.setSize(175, 175);
        resources.setVisible(true);
//        resources.add(new JLabel("Resources"));
        
        GridBagConstraints gbcResources = new GridBagConstraints();
        gbcResources.insets = new Insets(5,5,5,5);
        gbcResources.gridx = 0;
        gbcResources.gridy = 0;
        gbcResources.gridheight = 2;
        gbcResources.gridwidth = 2;
        gbcResources.weightx = 0.6;
        gbcResources.weighty = 0.6;     
        gbcResources.anchor = GridBagConstraints.NORTHWEST;
        gbcResources.fill = GridBagConstraints.BOTH;
        overviewTab.add(resources, gbcResources);
        
//        // Will most likely change from a Panel to some sort of drop down menu
//        // Used to build units
        JPanel production = new JPanel();
        production.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(
                Color.BLACK, WIDTH), "production"));       
        production.setBackground(Color.LIGHT_GRAY);
        production.setPreferredSize(new Dimension(300, 155));
        production.setSize(300, 155);
 
        GridBagConstraints gbcProduction = new GridBagConstraints();
        gbcProduction.insets = new Insets(5,5,5,5);
        gbcProduction.gridx = GridBagConstraints.RELATIVE;
        gbcProduction.gridy = 0;
        gbcProduction.gridheight = 1;
        gbcProduction.gridwidth = 1;
        gbcProduction.weightx = 0.4;
        gbcProduction.weighty = 0.4;     
        gbcProduction.anchor = GridBagConstraints.NORTHEAST;
        gbcProduction.fill = GridBagConstraints.BOTH;
        production.setVisible(true);
        
        overviewTab.add(production, gbcProduction); 
        
        //Contains all the city statistics such as food, population, production, etc.
        JPanel cityStats = new JPanel();
        cityStats.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(
                Color.BLACK, WIDTH), "Current Statistics"));
        cityStats.setBackground(Color.LIGHT_GRAY);
        cityStats.setPreferredSize(new Dimension(180, 200));        
        cityStats.setSize(new Dimension(180,200));
        GridBagConstraints gbcCityStats = new GridBagConstraints();
        
        gbcCityStats.insets = new Insets(5,5,5,5);
        gbcCityStats.gridx = 0;
        gbcCityStats.gridy = GridBagConstraints.RELATIVE;
        gbcCityStats.gridheight = 2;
        gbcCityStats.gridwidth = 2;
        gbcCityStats.weightx = 0.6;
        gbcCityStats.weighty = 0.6;
        gbcCityStats.anchor = GridBagConstraints.SOUTHWEST;
        gbcCityStats.fill = GridBagConstraints.BOTH;
//        
        overviewTab.add(cityStats, gbcCityStats);
        
        //Contains a list of the units currently on the city tile
        JPanel cityUnits = new JPanel();
        cityUnits.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(
                Color.BLACK, WIDTH), "City's Units"));
        cityUnits.setPreferredSize(new Dimension(300, 90));
        cityUnits.setBackground(Color.LIGHT_GRAY);
        cityUnits.setVisible(true);
        
        GridBagConstraints gbcCityUnits = new GridBagConstraints();
        gbcCityUnits.insets = new Insets(5,5,5,5);
        gbcCityUnits.gridx = GridBagConstraints.RELATIVE;
        gbcCityUnits.gridy = 1;
        gbcCityUnits.gridheight = 1;
        gbcCityUnits.gridwidth = 2;
        gbcCityUnits.weightx = .3;
        gbcCityUnits.weighty = .3;        
        gbcCityUnits.anchor = GridBagConstraints.SOUTHEAST;
        gbcCityUnits.fill = GridBagConstraints.BOTH;
        overviewTab.add(cityUnits, gbcCityUnits);

        JTabbedPane productionTab = new JTabbedPane();
        JTabbedPane resourceTab = new JTabbedPane();
        
        
        tabbedPane.addTab("OVERVIEW", overviewTab);
        tabbedPane.addTab("PRODUCTION", productionTab);
        tabbedPane.addTab("RESOURCES", resourceTab);
        cp.add(tabbedPane);        
        
//        this.setSize(650, 400);
        this.setVisible(true);
        this.setResizable(false);
        this.pack();
        
    }

    @Override
    public void windowOpened(WindowEvent e) {

    }

    @Override
    public void windowClosing(WindowEvent e) {
//        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void windowClosed(WindowEvent e) {

    }

    @Override
    public void windowIconified(WindowEvent e) {
//        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
//        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void windowActivated(WindowEvent e) {
//        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
//        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
        
}
